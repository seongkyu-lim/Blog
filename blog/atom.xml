<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://seongkyu-lim.github.io/Blog/blog</id>
    <title>Seongkyu-lim Blog</title>
    <updated>2022-09-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://seongkyu-lim.github.io/Blog/blog"/>
    <subtitle>Seongkyu-lim Blog</subtitle>
    <icon>https://seongkyu-lim.github.io/Blog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[9월 27일의 깨달음]]></title>
        <id>/2022/09/27/</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/2022/09/27/"/>
        <updated>2022-09-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[일주일간의 온보딩 기간 후에 두가지 태스크를 정하여 두달간 진행하게 되었다.]]></summary>
        <content type="html"><![CDATA[<p>일주일간의 온보딩 기간 후에 두가지 태스크를 정하여 두달간 진행하게 되었다.</p><p>그 중 하나의 태스크는 바로 채용 사이트 담당 개발!</p><p>이미 1차적으로 만들어져있는 상황이며 추가적인 요구사항에 맞춰 공지사항과 몇가지 수정, 전반적인 코드리팩토링을 진행하게 되었다.</p><p>(외주로 급하게 만든 프로젝트이기에 이후에도 안정적인 유지 관리를 위해 리팩토링 하기로 결정.)</p><p>기존에 배포되어있는 환경(ec2)에서 eks로의 프로젝트 이전이 필요했으며 프론트 작업도 필요했기에 꽤나 여러분과의 커뮤니케이션이 필요한 작업이었다.</p><p>devops 엔지니어와의 소통, 프론트 엔지니어와의 소통, 디자이너와의 소통, 인수인계 해주신 백엔드 개발자와의 소통..!</p><p>결과적으로 2주간의 작업 끝에 오늘 배포를 진행하였으며 공지사항의 이미지 업로드 기능을 제외한 채 배포를 하게 되었고 이미지 업로드 기능은 차주 수요일 배포로 연장하게 되었다..</p><p>다행히 급한 요구사항이 아니어서 늦출 수 있었지, 만약 급한 요구사항이었다면 굉장히 난감한 상황이 생길 뻔했다.</p><p>이렇게 약간은(?) 아쉬운 결과가 나오게된 원인을 생각해 봤다.</p><p>그 원인은 바로 바로 여러명의 인원이서 함께 작업을 진행할 때, 결코 나의 계획대로 진행되지는 않는다는 것을 몰랐고 그래서 계획에 차질이 생겼을 때 대처할 만한 준비를 하지 않았다는 것이다.</p><p>다양한 사람들이 각자의 상황이 존재하기 때문에 당연하게도 내가 계획한대로 진행되기에는 변수가 너무 많은 것이다.</p><p>다음 부터는 항상 최악의 상황, 혹은 다양한 변수를 고려하여 업무를 진행할 필요가 있다는 것을 깨달은 하루였다.</p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="enlightenment" term="enlightenment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[9월 22일의 깨달음]]></title>
        <id>/2022/09/22/</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/2022/09/22/"/>
        <updated>2022-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[@Setter를 지양하는 것이 좋은 것인가 ?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setter를-지양하는-것이-좋은-것인가-">@Setter를 지양하는 것이 좋은 것인가 ?<a class="hash-link" href="#setter를-지양하는-것이-좋은-것인가-" title="Direct link to heading">​</a></h2><p>오늘 코드 리뷰를 받으면서 @Data와 @Setter를 지양하는 방향으로의 수정을 제안 받았다.</p><p>(이 때 @Setter는 객체 초기화가 아닌 필드 수정 시 사용되는 상황입니다.)</p><p>해당 리뷰를 통해 언급한 두가지 어노테이션을 지양해야되는 이유에 대해 고민해보았다.</p><p>@Setter를 클래스에 적용하면 해당 클래스의 필드들을 수정하는 메소드가 모두 생성이 된다. 수정 가능성이 없는 필드들에 대해서도 수정 메소드가 생기는 것은 원하지 않는 동작이 발생할 가능성을 만들어낸다.</p><p>즉, 객체의 일관성을 유지하기 어렵게 만든다.</p><p>필드에 @Setter를 적용하면은?? 그러면 위 문제는 해결된다고 생각한다. 지양해야되는 다른 이유가 또 무엇이 있을까??</p><p>리뷰를 주신 분께서 앞전에 다른 레포에서 의견이 오고갔던 @Setter사용 관련 코멘트들을 보여주셨고 해당 의견에는 이러한 내용도 있었다.</p><p>“@Setter를 사용하는 것이 아닌 메소드를 따로 구현하면 메소드 명을 통해 해당 값을 변경하는 의도를 좀 더 명확히 표현할 수 있습니다.”</p><p>즉, @Setter 수정 메소드를 사용함으로써 코드 가독성을 높이고 유지보수측면에서 이점을 가져갈 수 있다.</p><hr><p>별개로 @Setter를 지양하는 것에 대해 구글링을 해보니, 객체를 생성하여 값들을 초기화하는 상황에서 @Setter를 지양해야한다는 글들이 많아 해당 내용도 간략히 정리해보자.</p><p>언급한 상황에서 @Setter를 사용하면 두가지 문제점이 있다.</p><ol><li>객체의 일관성 유지 어려움.</li><li>변화 의도를 파악하기 어려움.</li></ol><p>수정할 때 @Setter를 사용하는 상황과 비슷한 문제점이다.</p><p>이를 해결하기 위한 방법으로는</p><ol><li>생성자 사용</li><li>@Builder 사용(권장)</li></ol><p>이 있다.</p><p>생성자를 사용하면 인자들이 다양하게 들어오는 것에 대해 일일이 생성자들을 만들어주어야하며 어떤 필드에 어떤 값이 들어가는지 확인이 어렵기 때문에 가독성이 떨어지는 문제가 있다.</p><p>빌더 패턴을 사용하면 이러한 문제들을 해결할 수 있다!</p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="enlightenment" term="enlightenment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[9월 06일의 깨달음]]></title>
        <id>/2022/09/06/</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/2022/09/06/"/>
        <updated>2022-09-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기]]></summary>
        <content type="html"><![CDATA[<p><a href="https://engineering.linecorp.com/ko/blog/port-and-adapter-architecture/" target="_blank" rel="noopener noreferrer">지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hexagonal-architecture">Hexagonal Architecture<a class="hash-link" href="#hexagonal-architecture" title="Direct link to heading">​</a></h2><p>회사에 입사한지 일주일정도가 다 되가는 시점..! 노션을 이곳저곳 기웃거리던 중에 흥미로운 글을 발견했다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="아키텍쳐">아키텍쳐!<a class="hash-link" href="#아키텍쳐" title="Direct link to heading">​</a></h3><p>입사 면접 당시 아키텍쳐에 대한 책을 읽어보거나 공부를 해본적이 있냐는 질문을 받은 기억이 났다. 또한 3개월간 인턴 근무를 했던 이전 회사에서 프로젝트를 설계할 때, 사수에게 어떤 아키텍쳐를 도입할 계획인지에 대해 질문을 받았던 기억이 났다.</p><p>점점 더 큰 규모의 프로젝트를 접할 기회가 생기면서 DDD, TDD등과 함께 아키텍쳐 설계에 대해 공부해야할 필요성을 느끼고 있던 와중에 새로운 아키텍쳐 이름을 발견했다!</p><p>헥사고날, 육각형 설계 방식은 어떤 것일까</p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="enlightenment" term="enlightenment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[7월 18일의 깨달음]]></title>
        <id>/2022/07/18/</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/2022/07/18/"/>
        <updated>2022-07-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[파이썬에서는 자바와 같이 Static을 남용하는 것을 지양하는 이슈가 없는 것인가 ?!]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="파이썬에서는-자바와-같이-static을-남용하는-것을-지양하는-이슈가-없는-것인가-">파이썬에서는 자바와 같이 Static을 남용하는 것을 지양하는 이슈가 없는 것인가 ?!<a class="hash-link" href="#파이썬에서는-자바와-같이-static을-남용하는-것을-지양하는-이슈가-없는-것인가-" title="Direct link to heading">​</a></h2><p>Spring으로 서버 개발을 계속해오다가 최근 Django(DRF), FastAPI로 서버개발을 하는 기회가 생기게 되었다. 새로운 프레임웤으로 개발을 하면서 낯선 부분들이 많았기에 기초적인 개념들부터 무작정 학습을 하다가, 최근 이제 View단과 Serivce단을 분리할만할 정도로 로직이 구체화되어 분리를 하던 중에 문득 이런 의문점이 들었다.</p><p>파이썬에서는 자바와 같이 static을 남용하는 것을 지양하는 이슈가 없는 것인가 ?!</p><p>레이어를 분리하면서 python에서 다른 레이어(클래스)의 메소드를 클래스 네임으로 바로 참조하여 사용하는 코드들(@classmethod, @staticmethod를 사용)을 그냥 별 생각없이 따라 사용하다가, 어라? 뭔가 찝찝하지 왜 ?(이렇게 간편하다고 ?)라는 기분이 들었다.</p><p>그리고 Spring 프레임웤에서는 어떻게 했더라 ? 생각해보니, 자바에서도 static 키워드를 사용하면 메소드와 변수를 static으로 선언할 수 있고 클래스 네임으로 바로 참조가 가능하지만 스프링에서는 그렇게 하지않는다. 그리고 객체들을 프레임웤에서 직접 관리해 주지만, 해당 객체(빈)을 등록하고 주입하기위해서는 개발자가 어느정도 객체 관리를 고려하여 어노테이션 및 코드를 짜주어야한다.</p><p>그런데 파이썬에서는 static을 남용해도 전혀 문제가 되지 않는 것인가 ?!</p><p>자바에서 static을 지양하는 이유는 다양한데,  핵심적으로는 다음과 같은 이유가 있다.</p><ol><li>Java에서는 static은 프로그램이 실행 시에 data영역에 생성되어서 많이 사용할 경우 메모리를 낭비하게되는 이슈가 있음.</li><li>static이 객체지향 관점에 반하는 개념이라는 의견.</li></ol><p>(static 사용과 관련한 많은 의견들이 있는 <a href="https://stackoverflow.com/questions/7026507/why-are-static-variables-considered-evil%22" target="_blank" rel="noopener noreferrer">스택오버플로우의 한 게시글</a>을 읽어보면 더욱 구체적으로 이유를 파악 할 수 있따.)</p><p>Django와 같은 큰 규모의 프레임워크에서 static 객체를 많이 사용한다면(@classmethod, @staticmethod), static을 남용해도 파이썬에서는 문제가 되지 않을 거라는 것을 짐작할 수는 있다. 하지만 그 이유는 무엇일까?</p><p>자바에서 static을 지양하는 대표적 이유에 근거하여 python에서는 문제가 없는 이유에 대해 몇가지 추측을 해보았다.</p><p>추측 1. @classmethod, @staticmethod를 사용해도 자바에서와 달리 파이썬에서는 data영역에 static 객체가 생성되지 않는다. ( 대신 heap영역? )</p><p>즉, 자바에서의 static 메소드처럼 @classmethod, @staticmethod을 사용하면 클래스 네임으로 접근이 가능하지만, 메모리상에서는 static이 아니다.</p><p>추측 2.  파이썬은 하이 레벨 언어로서 메모리 관리에 도가 터 있기 때문에 코드 단에서 메모리와 관련된 고려해야될 이슈가 없다.</p><p>위의 추측들을 해결하기 위해서는 Python이 어떻게 메모리를 관리하는지를 이해할 필요가 있을 것 같다.</p><p>특징 1.</p><p>우선 프로그램이 실행되면, OS는 프로세스에게 정해진 Memory를 할당해주고 프로세스는 할당받은 Memory를 자신의 방식에 맞게 영역을 나누어 활용합니다.</p><p>“메모리는 컴퓨팅 시스템에서 중요한 구조이자 프로세스의 코어한 정보들이 모여있는 공간입니다. 중요성도 높고, 휘발될 여지가 있는 만큼 대부분의 프로그래밍 언어는 내장된 memory manager를 구성하여 둡니다. Python의 경우 VMM이 할당해준 빈 페이지들은 Python의 memory manager가 권한을 가지고 있습니다.</p><p>Python은 기본적으로 할당된 Memory 공간을 4개의 종류로 구분하여 관리합니다.</p><p>HEAP / STACK / Static&amp;Global / CODE</p><p>HEAP, STACK 이 두가지 영역은 Dynamic memory allocation 과 static memory allocation을 위해 존재합니다. 이 두 영역의 메모리 할당 방식과 작동 원리는 Generator와 함께 이해하는 것이 좋습니다. 이를 위해 다음 글에서 자세히 다뤄보겠습니다.</p><p>Static&amp;Global 영역은 전역 변수 등을 다루기 위해 할당되는 공간입니다. Code 영역은 instruction 들이 보관되는 영역입니다. 프로세스가 각 명령줄을 보관하는 목적으로 사용하는 공간입니다.</p><p>Python과 관련하여 메모리 관련 이해도가 필요한 부분은 heap 과 stack 부분인데, 이 부분에 대한 이해도가 높을 수록 성능과 효율성을 고려한 코드가 나오는 것 같습니다.” [원문 - <a href="https://day-by-day.kr/python-memory/" target="_blank" rel="noopener noreferrer">https://day-by-day.kr/python-memory/</a>]</p><p>위의 글에서 파이썬은 heap 영역과 stack영역을 핵심적으로 사용하며 static memory allocation (정적 메소드 생성과 같은)도 heap, stack영역을 사용하는 것을 알 수 있다.</p><p>특징 2.</p><p>또한 파이썬은 모든 것이 ‘객체'로 저장된다. 예를 들어 c언어에서는 x=10이라고 변수를 할당하면 메모리에 해당 값이 바로 저장되지만, 파이썬에서는 int라는 object를 만들어 변수 x가 해당 객체(10이 담겨있는 int 객체)를 가리키는 형태로 저장된다고 한다.</p><p>특징 3.</p><p>파이썬은 개발자가 직접 동적 할당을 할 수 있는 기능이없다.(ex c의 malloc) 파이썬은 자동으로 메로리를 관리해주는 언어이기 때문. python memory manager는 자동으로 포인터를 움직여서 메모리 할당범위를 조절해주며, 동적 관리를 한다. 또한 운영체제와 소통하면서 manager가 알아서 메모리를 관리함으로써 OS의 부담을 줄여주는 언어다.</p><p>참고자료 - <a href="https://woochan-autobiography.tistory.com/867" target="_blank" rel="noopener noreferrer">https://woochan-autobiography.tistory.com/867</a></p><p>결론적으로 파이썬은 정적 메소드에 대해 data영역을 사용하지 않으며 메모리 관리에 우수한 성능을 가지고 있기 때문에 메모리와 관련하여 코드단에서 고려해야될 요소가 없다고 판단함.</p><p>다만 정확히 @staticmethod, @classmethod데코레이터를 붙인 클래스의 메소드가 어떻게 메모리에 할당되는 지에 대해 알면 더욱 정확한 결론을 얻을 수 있을 것이라 생각한다. 이를 위해서는 python memory manager에 대한 공부가 필요함!</p><p><a href="https://docs.python.org/3/c-api/memory.html#" target="_blank" rel="noopener noreferrer">파이썬 memory management에 관한 공식 문서</a></p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="thingking" term="thingking"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1월 3일의 깨달음]]></title>
        <id>/2022/01/03/</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/2022/01/03/"/>
        <updated>2022-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.]]></summary>
        <content type="html"><![CDATA[<p>좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.</p><p>마지막으로 정리를 담당하였는데, 정리를 위해 스터디한 내용을 다시 읽어보니 내가 이걸 공부했었나 싶은 놀라운 상황이..</p><p>언젠가 써먹을 때가 있겠지 싶어 그래도 개념들을 다시 한번 정리해보자.</p><p>사실 디자인 패턴이라는 개념에 어떤 식으로 접근을 해야할지 스터디 마지막 주까지도 감이 잘 오지 않는다.</p><p>그래서 현직자의 시선을 빌려보고자 여러 개발자분들의 블로그에 디자인 패턴에 대한 내용이 있는지 찾아보다가 현재 인프런 CTO를 맞고 게신 이동욱님의 블로그의 포스트로 들어가게 되었다.</p><p>자바지기(박재성)님의 세미나 내용 정리 글이었다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다">삶을 훌륭하게 가꾸어주는 것은 행복감이 아니라 깊이 빠져드는 몰입이다.<a class="hash-link" href="#삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다" title="Direct link to heading">​</a></h3><p>좋은 글귀와 함께, 스터디의 막바지에 와서도 디자인 패턴에 대한 감이 잘 오지 않는 내가 정상이라는 것을 말해주는 문장이 있다.</p><ul><li>디자인 패턴을 공부해도 어디에 쓸지 모르는 경우가 많다.</li><li>리팩토링을 끊임없이 하다가 디자인패턴을 보면 더 큰 깨달음을 얻지만, 반대로하게 되면 스트레스만 늘수도 있다.</li></ul><p>맞다. 사실 지금의 나한테 디자인 패턴은 반드시 필요한 개념은 아닐 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-">그렇다면 디자인 패턴을 공부하면서 얻을 수 있었던 경험은 무엇인가 ?<a class="hash-link" href="#그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-" title="Direct link to heading">​</a></h3><ul><li>자바 언어를 공부할 때, 알고리즘 문제를 풀거나 강의를 들으며 문법적인 것을 공부를 했다면 디자인 패턴을 공부하며 예시들을 보면서 순수 자바언어로 짜는 코드들에 대한 시야가 확장 됨.</li><li>코드를 설명하는 능력의 부족함, 개선하고자하는 의지를 얻음.</li></ul><script src="https://utteranc.es/client.js" repo="seongkyu-lim/Blog-Comments" issue-term="pathname" label="utterances" theme="github-dark" crossorigin="anonymous" async=""></script>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="thingking" term="thingking"/>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://seongkyu-lim.github.io/Blog/blog</id>
    <title>Seongkyu-lim Blog</title>
    <updated>2022-09-22T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://seongkyu-lim.github.io/Blog/blog"/>
    <subtitle>Seongkyu-lim Blog</subtitle>
    <icon>https://seongkyu-lim.github.io/Blog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[9월 22일의 꺠달음]]></title>
        <id>enlightenment</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/enlightenment"/>
        <updated>2022-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[@Setter를 지양하는 것이 좋은 것인가 ?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setter를-지양하는-것이-좋은-것인가-">@Setter를 지양하는 것이 좋은 것인가 ?<a class="hash-link" href="#setter를-지양하는-것이-좋은-것인가-" title="Direct link to heading">​</a></h2><p>오늘 코드 리뷰를 받으면서 @Data와 @Setter를 지양하는 방향으로의 수정을 제안 받았다.</p><p>(이 때 @Setter는 객체 초기화가 아닌 필드 수정 시 사용되는 상황입니다.)</p><p>해당 리뷰를 통해 언급한 두가지 어노테이션을 지양해야되는 이유에 대해 고민해보았다.</p><p>@Setter를 클래스에 적용하면 해당 클래스의 필드들을 수정하는 메소드가 모두 생성이 된다. 수정 가능성이 없는 필드들에 대해서도 수정 메소드가 생기는 것은 원하지 않는 동작이 발생할 가능성을 만들어낸다.</p><p>즉, 객체의 일관성을 유지하기 어렵게 만든다.</p><p>필드에 @Setter를 적용하면은?? 그러면 위 문제는 해결된다고 생각한다. 지양해야되는 다른 이유가 또 무엇이 있을까??</p><p>리뷰를 주신 분께서 앞전에 다른 레포에서 의견이 오고갔던 @Setter사용 관련 코멘트들을 보여주셨고 해당 의견에는 이러한 내용도 있었다.</p><p>“@Setter를 사용하는 것이 아닌 메소드를 따로 구현하면 메소드 명을 통해 해당 값을 변경하는 의도를 좀 더 명확히 표현할 수 있습니다.”</p><p>즉, @Setter 수정 메소드를 사용함으로써 코드 가독성을 높이고 유지보수측면에서 이점을 가져갈 수 있다.</p><hr><p>별개로 @Setter를 지양하는 것에 대해 구글링을 해보니, 객체를 생성하여 값들을 초기화하는 상황에서 @Setter를 지양해야한다는 글들이 많아 해당 내용도 간략히 정리해보자.</p><p>언급한 상황에서 @Setter를 사용하면 두가지 문제점이 있다.</p><ol><li>객체의 일관성 유지 어려움.</li><li>변화 의도를 파악하기 어려움.</li></ol><p>수정할 때 @Setter를 사용하는 상황과 비슷한 문제점이다.</p><p>이를 해결하기 위한 방법으로는</p><ol><li>생성자 사용</li><li>@Builder 사용(권장)</li></ol><p>이 있다.</p><p>생성자를 사용하면 인자들이 다양하게 들어오는 것에 대해 일일이 생성자들을 만들어주어야하며 어떤 필드에 어떤 값이 들어가는지 확인이 어렵기 때문에 가독성이 떨어지는 문제가 있다.</p><p>빌더 패턴을 사용하면 이러한 문제들을 해결할 수 있다!</p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="enlightenment" term="enlightenment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[9월 06일의 꺠달음]]></title>
        <id>enlightenment</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/enlightenment"/>
        <updated>2022-09-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setter를-지양하는-것이-좋은-것인가-">@Setter를 지양하는 것이 좋은 것인가 ?<a class="hash-link" href="#setter를-지양하는-것이-좋은-것인가-" title="Direct link to heading">​</a></h2><p>오늘 코드 리뷰를 받으면서 @Data와 @Setter를 지양하는 방향으로의 수정을 제안 받았다.</p><p>(이 때 @Setter는 객체 초기화가 아닌 필드 수정 시 사용되는 상황입니다.)</p><p>해당 리뷰를 통해 언급한 두가지 어노테이션을 지양해야되는 이유에 대해 고민해보았다.</p><p>@Setter를 클래스에 적용하면 해당 클래스의 필드들을 수정하는 메소드가 모두 생성이 된다. 수정 가능성이 없는 필드들에 대해서도 수정 메소드가 생기는 것은 원하지 않는 동작이 발생할 가능성을 만들어낸다.</p><p>즉, 객체의 일관성을 유지하기 어렵게 만든다.</p><p>필드에 @Setter를 적용하면은?? 그러면 위 문제는 해결된다고 생각한다. 지양해야되는 다른 이유가 또 무엇이 있을까??</p><p>리뷰를 주신 분께서 앞전에 다른 레포에서 의견이 오고갔던 @Setter사용 관련 코멘트들을 보여주셨고 해당 의견에는 이러한 내용도 있었다.</p><p>“@Setter를 사용하는 것이 아닌 메소드를 따로 구현하면 메소드 명을 통해 해당 값을 변경하는 의도를 좀 더 명확히 표현할 수 있습니다.”</p><p>즉, @Setter 수정 메소드를 사용함으로써 코드 가독성을 높이고 유지보수측면에서 이점을 가져갈 수 있다.</p><hr><p>별개로 @Setter를 지양하는 것에 대해 구글링을 해보니, 객체를 생성하여 값들을 초기화하는 상황에서 @Setter를 지양해야한다는 글들이 많아 해당 내용도 간략히 정리해보자.</p><p>언급한 상황에서 @Setter를 사용하면 두가지 문제점이 있다.</p><ol><li>객체의 일관성 유지 어려움.</li><li>변화 의도를 파악하기 어려움.</li></ol><p>수정할 때 @Setter를 사용하는 상황과 비슷한 문제점이다.</p><p>이를 해결하기 위한 방법으로는</p><ol><li>생성자 사용</li><li>@Builder 사용(권장)</li></ol><p>이 있다.</p><p>생성자를 사용하면 인자들이 다양하게 들어오는 것에 대해 일일이 생성자들을 만들어주어야하며 어떤 필드에 어떤 값이 들어가는지 확인이 어렵기 때문에 가독성이 떨어지는 문제가 있다.</p><p>빌더 패턴을 사용하면 이러한 문제들을 해결할 수 있다!</p>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="enlightenment" term="enlightenment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[7월 18일의 생각]]></title>
        <id>thingking</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/thingking"/>
        <updated>2022-07-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[파이썬에서는 자바와 같이 Static을 남용하는 것을 지양하는 이슈가 없는 것인가 ?!]]></summary>
        <content type="html"><![CDATA[<p>좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.</p><p>마지막으로 정리를 담당하였는데, 정리를 위해 스터디한 내용을 다시 읽어보니 내가 이걸 공부했었나 싶은 놀라운 상황이..</p><p>언젠가 써먹을 때가 있겠지 싶어 그래도 개념들을 다시 한번 정리해보자.</p><p>사실 디자인 패턴이라는 개념에 어떤 식으로 접근을 해야할지 스터디 마지막 주까지도 감이 잘 오지 않는다.</p><p>그래서 현직자의 시선을 빌려보고자 여러 개발자분들의 블로그에 디자인 패턴에 대한 내용이 있는지 찾아보다가 현재 인프런 CTO를 맞고 게신 이동욱님의 블로그의 포스트로 들어가게 되었다.</p><p>자바지기(박재성)님의 세미나 내용 정리 글이었다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다">삶을 훌륭하게 가꾸어주는 것은 행복감이 아니라 깊이 빠져드는 몰입이다.<a class="hash-link" href="#삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다" title="Direct link to heading">​</a></h3><p>좋은 글귀와 함께, 스터디의 막바지에 와서도 디자인 패턴에 대한 감이 잘 오지 않는 내가 정상이라는 것을 말해주는 문장이 있다.</p><ul><li>디자인 패턴을 공부해도 어디에 쓸지 모르는 경우가 많다.</li><li>리팩토링을 끊임없이 하다가 디자인패턴을 보면 더 큰 깨달음을 얻지만, 반대로하게 되면 스트레스만 늘수도 있다.</li></ul><p>맞다. 사실 지금의 나한테 디자인 패턴은 반드시 필요한 개념은 아닐 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-">그렇다면 디자인 패턴을 공부하면서 얻을 수 있었던 경험은 무엇인가 ?<a class="hash-link" href="#그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-" title="Direct link to heading">​</a></h3><ul><li>자바 언어를 공부할 때, 알고리즘 문제를 풀거나 강의를 들으며 문법적인 것을 공부를 했다면 디자인 패턴을 공부하며 예시들을 보면서 순수 자바언어로 짜는 코드들에 대한 시야가 확장 됨.</li><li>코드를 설명하는 능력의 부족함, 개선하고자하는 의지를 얻음.</li></ul>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="thingking" term="thingking"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[1월 3일의 생각]]></title>
        <id>thingking</id>
        <link href="https://seongkyu-lim.github.io/Blog/blog/thingking"/>
        <updated>2022-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.]]></summary>
        <content type="html"><![CDATA[<p>좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.</p><p>마지막으로 정리를 담당하였는데, 정리를 위해 스터디한 내용을 다시 읽어보니 내가 이걸 공부했었나 싶은 놀라운 상황이..</p><p>언젠가 써먹을 때가 있겠지 싶어 그래도 개념들을 다시 한번 정리해보자.</p><p>사실 디자인 패턴이라는 개념에 어떤 식으로 접근을 해야할지 스터디 마지막 주까지도 감이 잘 오지 않는다.</p><p>그래서 현직자의 시선을 빌려보고자 여러 개발자분들의 블로그에 디자인 패턴에 대한 내용이 있는지 찾아보다가 현재 인프런 CTO를 맞고 게신 이동욱님의 블로그의 포스트로 들어가게 되었다.</p><p>자바지기(박재성)님의 세미나 내용 정리 글이었다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다">삶을 훌륭하게 가꾸어주는 것은 행복감이 아니라 깊이 빠져드는 몰입이다.<a class="hash-link" href="#삶을-훌륭하게-가꾸어주는-것은-행복감이-아니라-깊이-빠져드는-몰입이다" title="Direct link to heading">​</a></h3><p>좋은 글귀와 함께, 스터디의 막바지에 와서도 디자인 패턴에 대한 감이 잘 오지 않는 내가 정상이라는 것을 말해주는 문장이 있다.</p><ul><li>디자인 패턴을 공부해도 어디에 쓸지 모르는 경우가 많다.</li><li>리팩토링을 끊임없이 하다가 디자인패턴을 보면 더 큰 깨달음을 얻지만, 반대로하게 되면 스트레스만 늘수도 있다.</li></ul><p>맞다. 사실 지금의 나한테 디자인 패턴은 반드시 필요한 개념은 아닐 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-">그렇다면 디자인 패턴을 공부하면서 얻을 수 있었던 경험은 무엇인가 ?<a class="hash-link" href="#그렇다면-디자인-패턴을-공부하면서-얻을-수-있었던-경험은-무엇인가-" title="Direct link to heading">​</a></h3><ul><li>자바 언어를 공부할 때, 알고리즘 문제를 풀거나 강의를 들으며 문법적인 것을 공부를 했다면 디자인 패턴을 공부하며 예시들을 보면서 순수 자바언어로 짜는 코드들에 대한 시야가 확장 됨.</li><li>코드를 설명하는 능력의 부족함, 개선하고자하는 의지를 얻음.</li></ul>]]></content>
        <author>
            <name>Lim SeongKyu</name>
            <uri>https://github.com/seongkyu-lim</uri>
        </author>
        <category label="thingking" term="thingking"/>
    </entry>
</feed>
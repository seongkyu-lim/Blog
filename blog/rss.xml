<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Seongkyu-lim Blog</title>
        <link>https://seongkyu-lim.github.io/Blog/blog</link>
        <description>Seongkyu-lim Blog</description>
        <lastBuildDate>Wed, 11 May 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[3월 05일의 깨달음]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/knowledge4</link>
            <guid>knowledge4</guid>
            <pubDate>Wed, 11 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[파이썬 환경을 가상환경으로 사용해야하는 이유는 ?!]]></description>
            <content:encoded><![CDATA[<h2>파이썬 환경을 가상환경으로 사용해야하는 이유는 ?!</h2><p>python의 버전부터 여러 라이브러리의 버전을 독립적으로 관리할 수 있습니다.</p><p>독립적인 환경을 구성하는 것의 중요성을 여러 상황을 통해 함께 공감해봅시다.</p><p>python과 여러 라이브러리들의 버전은 계속해서 업그레이드됩니다. 새로운 프로젝트를 진행하면서 다른 기존의 프로젝트에서 사용한 라이브러리의 업그레이드된 버전을 적용하였을 때, 가상환경을 사용하지 않는다면 이전 프로젝트에서는 예전 버전의 기능이 구현되어있는데 라이브러리의 버전은 업그레이드되었기에 호환이 되지않아 오류가나는 상황이 충분히 생길 수 있습니다.</p><p>파이썬으로 로컬에서만 작업하는 것이아니라 원격 서버에 배포하는 것과 같은 상황일 때, 해당 프로젝트를 독립적으로 관리하고 있지 않다면, 로컬에 설치되어있는 수 많은 파이썬 라이브러리, 파이썬 버전들 중 해당 프로젝트에서만 사용되고 있는 것을 일일이 체크하는 것은 많은 시간적 비용이 들어갈 것입니다.</p><p>이러한 불편한 상황을 사전에 방지하기위해 파이썬으로 프로젝트를 진행할 때는 가상환경을 세팅한 후에 해당 가상환경에서 진행하는 것을 추천드립니다! (여타 다른 언어, 분야에서도 적용이 될 수 있는 논제입니다.)</p><hr/><h2>pyenv로 파이썬 가상환경 만들기</h2><p>python 가상환경을 만들기 위해 사용할 수 있는 프로그램은 꽤 다양합니다.</p><ul><li>데이터 분석 관련 다양한 기본 라이브러리들이 세팅되어 지원해주는 conda라는 패키지 관리자.</li><li>파이썬에서 공식으로 권장하는 패키지 관리자인 pipenv</li><li>파이썬에 내장되어있는 가상환경 모듈인 venv</li><li>pyenv라는 파이썬 버전 관리 시스템의 플러그인인 pyenv-virtualenv</li></ul><p>등 다양한 프로그램이 존재합니다.</p><p>그 중 pyenv-virtualenv로 파이썬 가상환경을 만드는 방법에 대해 소개시켜드리겠습니다.</p><p><a href="https://github.com/pyenv/pyenv">pyenv</a> 는 오픈소스 python version management 툴로써 OS에서 파이썬의 여러 버전을 하나의 프로그램으로 관리할 수 있도록합니다.</p><p>( OS에서는 설정한 하나의 파이썬 버전만 사용되도록 하지만 pyenv를 사용하면 여러 버전들을 동시에 관리하여 편리하게 사용이 가능합니다. )</p><p>( pipenv, conada등에서도 버전을 선택하여 가상환경마다 다른 버전을 사용할 수 있지만, 선택할 수 있는 파이썬의 버전이 로컬에 설치되어있는 것만 가능하다면 pyenv는 설치가 되어있지않다면 설치와 동시에 적용이된다는 점에서 더 완성도있는 python의 version management 툴이라 할 수 있습니다. )</p><p>이제 pyenv를 통해 가상한경을 만들어 보겠습니다.</p><h3>Step 1. pyenv와 pyenv-virtualenv 설치.</h3><p>homebrew를 이용해 설치를 진행하겠습니다.</p><pre><code class="language-bash">brew update
brew install pyenv
brew install pyenv-virtualenv
</code></pre><h3>Step 2. pyenv, virtualenv 관련 설정하기.</h3><p>자신이 사용하는 쉘 종류에 맞는 설정파일에 접근하여 pyenv, pyenv-virtualenv가 정상 동작하도록 초기화 코드를 추가해줍니다. ( pyenv, pyenv-virtualenv 설치 후 안내 스크립트를 읽고 그대로 해주시면 됩니다. )</p><p>vim ~/.zshrc</p><pre><code class="language-bash">eval &quot;$(pyenv init -)&quot;
eval &quot;$(pyenv virtualenv-init -)&quot;
</code></pre><p>pyenv 명령어를 입력했을 때 아래와 같이 명령어 목록이 출력되면 정상적으로 설치 및 설정이 된 것입니다.</p><p><img src="image/knowledge6-1.png" alt="knowledge6-1.png"/></p><h3>Step 3. pyenv-virtualenv로 가상환경 만들어주기.</h3><pre><code class="language-bash">
pyenv install --list // pyenv로 설치가능한 리스트 확인

pyenv install &lt;version&gt; //pyenv로 사용하고자하는 파이썬 버전 설치.

pyenv versions // 설치된 버전들 확인. ( * 는 적용되어있는 버전. )

pyenv virtualenv &lt;version&gt; &lt;env_name&gt; // version, env_name으로 가상환경 설치.

pyenv virtualenv 3.9.12 py39 // 3.9.12버전의 파이썬으로 py39라는 이름의 가상환경 구성.

pyenv versions // 3.9.12/envs/py39 로 설치 됨을 확인.

</code></pre><p>ps. pyenv는 공식적으로 window os를 지원하지 않지만,  <a href="https://github.com/pyenv-win/pyenv-win">pyenv-win</a> 프로그램을 사용하여 설치할 수 있습니다. (  pyenv 깃헙 페이지에서도 소개 )</p><hr/><h2>pycharm IDE에서 pyenv로 만든 가상환경으로 파이썬 프로젝트 만들기</h2><p>pyenv로 가상환경을 생성하고 원하는 프로젝트 폴더에 pyenv 명령어로 가상환경을 적용할수도 있지만, 대중적으로 파이썬 프로젝트에 많이 사용되는 pycharm으로 가상환경 기반 프로젝트를 만드는 것까지 진행해보겠습니다.</p><h3>Step 1.  NEW PROJECT 클릭.</h3><p>pycharm에서 새로운 프로젝트 생성을 위해 welcome 페이지에서 NEW PROJECT를 클릭해줍니다.</p><h3>Step 2. python interperter 설정.</h3><p><img src="image/knowledge6-2.png" alt="knowledge6-2.png"/></p><p>프로젝트 생성 경로와 프로젝트 종류를 알맞게 설정해주었다면, 저희가 만든 pyenv virtualenv를 적용하기 위해 python interperter를  저희가 만든 pyenv 가상환경의 interpreter로 설정해줍니다. (interpreter 실행 파일 경로로 설정)</p><p>interpreter실행 파일의 경로 확인 방법 :</p><pre><code class="language-bash">pyenv which python3.9.12
</code></pre><p>일반적으로 pyenv로 설치한 파이썬 디렉토리는 ~/.pyenv/versions 디렉토리에 위치하며, 설치된 파이썬 디렉토리(가상환경 포함)의 인터프리터 실행 파일은 ~/.pyenv/versions/3.6.2/bin/python3.6에 위치합니다.</p><h2>create누르면 끝!</h2>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[3월 05일의 깨달음]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/knowledge4</link>
            <guid>knowledge4</guid>
            <pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[프로젝트의 요구사항중에 ‘매장 식사 인원은 최소 0명이상이어야한다.’와 같은 조건이 있다. 특정 변수의 값을 검사하는 방법은 무엇인가 ?]]></description>
            <content:encoded><![CDATA[<h2>프로젝트의 요구사항중에 ‘매장 식사 인원은 최소 0명이상이어야한다.’와 같은 조건이 있다. 특정 변수의 값을 검사하는 방법은 무엇인가 ?</h2><p>아무런 부가적인 기능들을 알아보지않고 순수 언어단위에서만 생각해보면, 단순하게 받아온 데이터 값(numOfGuests)를 조건문으로 값이 0이상인지 체크하여 처리를 다르게 할 수 있겠다..</p><p>하지만 스프링에서는 올바르지않은 데이터를 걸러내고 보안을 유지하기위해 Spring Validation 라이브러리를 지원하며, 이를 통해 데이터의 <span style="color:#ff7f00">유효성</span>을 검사할 수 있다.</p><p>아래 코드는 매장 식사 주문의 경우, 해당 테이블의 인원이 변경되었을 때 변경된 인원을 업데이트 하는 로직의 controller단이다.</p><p><img src="image/03-05-1.png" alt="03-05-1.png"/></p><p>이 때, @PathVariable로 받아오는 numberOfGuests 변수의 유효성을 검사하기 위해서, validation 어노테이션을 바로 해당 변수에 적용을 할 수 있다.</p><p>@Min어노테이션을 통해 특정 값 이상인지 여부를 검사할 수 있다.</p><p>&lt;해당 어노테이션의 인터페이스의 설명 내용.&gt;</p><p><img src="image/03-05-2.png" alt="03-05-2.png"/></p><p>그 이유로는, 아래는 해당 컨트롤러의 어노테이션들인데, @Validated 어노테이션이 적용되어있는 것을 확인할 수 있다. 해당 어노테이션을 클래스에 적용하면, MethodValidationPostProcessor에 의해서 Validation이 가능하도록 프록시 객체가 생성되고 생성된 프록시 객체를 통해서 바로 적용하고 검사할 수 있게 되는 것이다.</p><p><img src="image/03-05-3.png" alt="03-05-3.png"/></p><p>그렇다면 controller단에서의 데이터가 아닌, requestBody로 받은 dto안의 특정 멤버, 또는 requestBody로 받은 dto안의 또다른 dto안의 값인 경우, 즉 검사 요소가 서브클래스의 멤버라면 어떻게 유효성을 검사해야할까 ?</p><p>이 때는 @Valid 어노테이션을 사용해 검사가 가능하다.</p><p>아래의 코드와 같이, @RequestBody로 받은 dto에 @Valid 어노테이션을 붙여주고, 해당 dto에서 가지는 또다른 dto에도 @Valid를 붙여주고 검사를 하려는 클래스에 접근하였을 때, 해당 클래스의 검사하려는 멤버에게 검사를 위한 어노테이션을 붙여준다.</p><p><img src="image/03-05-4.png" alt="03-05-4.png"/></p><p><img src="image/03-05-5.png" alt="03-05-5.png"/></p><p><img src="image/03-05-6.png" alt="03-05-6.png"/></p><p><img src="image/03-05-7.png" alt="03-05-7.png"/></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2월 27일의 깨달음]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/knowledge3</link>
            <guid>knowledge3</guid>
            <pubDate>Sun, 27 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[kotlin collection 관련 함수들을 활용하여 코드를 더 깔끔하게 리팩토링 해보자!]]></description>
            <content:encoded><![CDATA[<h2>kotlin collection 관련 함수들을 활용하여 코드를 더 깔끔하게 리팩토링 해보자!</h2><p>kotlin collection 관련 함수에는 아주 많은 것들이 있으며, 그 중 map을 이용하여 반복문을 사용한 코드를 보다 깔끔하게 리팩토링하였다.</p><p>같이 스터디를 하는 스터디원분의 코드 리뷰를 통해 map을 활용하여 코드를 수정해보는 것이 어떻겠냐는 조언을 얻었고 코드를 수정하면서 map을 사용함으로써 얻었던 감정을 기억해보고자, 별거아닐 수 있지만 흔적을 남겨본다.</p><p>주어진 상황은 주문 생성 로직이다. 해당 로직은 아래와 같다.</p><p>step 1. 가게에서 음식 주문을 받는다.</p><p>step 2. 주문 내역을 db에 저장하는 로직을 수행한다.</p><p>step 3. 하나의 주문에는 여러개의 orderMenu가 존재하고, 주문에 메뉴들은 list로 받는다. 즉, 각각의 메뉴들을 반복문으로 조회하여 하나 씩 order_menu table(db)에 저장해준다.</p><p>해당 로직의 삭제된 코드와 추가된 코드는 아래와 같다.</p><p><img src="image/02-27-1.png" alt="02-27-1.png"/></p><p>코틀린에서는 람다 표현식에서 단일 매개변수의 이름을 it으로 부르기로 약속되어있다.</p><p>map함수를 적용함으로써, 코드도 간결해지고, 이해도 직관적으로 잘되는 코드가 되었다.</p><p>새로운 언어(코틀린)을 익히면서 아직 스프링도 계속해서 깊이를 더해가고 있는 상황이기 때문에 기본적인 구문으로 구현이 된다면 굳이 같은 기능을 하는 함수등을 찾아보고 코드의 질을 더 높이려는 시도는 하지 않았다.(못했다..?)근데 이번 스터디에서 로직 및 코드의 개선에 대한 의견을 받으면서, 앞으로 더 공부하고 발전해야할 요소들이 많구나 하는 생각을 했다. :)</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[1월 21일의 깨달음]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/knowledge2</link>
            <guid>knowledge2</guid>
            <pubDate>Fri, 21 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[코틀린으로 함수형 언어를 배워보자!]]></description>
            <content:encoded><![CDATA[<h2>코틀린으로 함수형 언어를 배워보자!</h2><p>코틀린은 함수형 언어이면서 동시에 객체 지향적 언어이기도한 다중 패러다임 언어이다. 코틀린 이전에 사용을 하던 자바 또한 자바 8부터 함수형 언어로써의 기능들을 지원하기 시작했다. 코틀린을 사용하면서 함수형 언어를 한번 공부해보고 사용해보자라는 생각이 들었고 오늘은 함수형 언어에 대한 지식을 익혀보자.</p><h3>함수형 언어란 ?</h3><p>함수형 프로그래밍은 자료 처리를 수학적 함수의 계산으로 취급하고  <span style="color:#ff7f00">상태</span>와  <span style="color:#ff7f00">가변 데이터</span>를 멀리하는 프로그래밍 패러다임의 하나이다. 명령형 프로그래밍에서는 상태를 바꾸는 것을 강조하는 것과는 달리, 함수형 프로그래밍은 함수의 응용을 강조한다.<!-- -->[위키백과]</p><h3>함수형 언어는 객체 지향적 언어와 무엇이 다른가 ?</h3><p>내가 지금 이해하고 있는 패러다임은 객체 지향, 절차 지향 정도이다. 절차 지향의 코드를 C언어를 통해 배우고 Java와 Python으로 객체 지향적인 개념들을 배우고 사용하면서, 코드를 이런식으로 짤 수 있구나..! 참 현실의 동작과 비슷하게 짜는 것이 좋다..!라는 감명을 받았었는데, 함수형 언어는 또 뭐지 ..?  객체 지향적으로 짜는 것도 충분히 불편하거나 안좋은 점이 없는 것 같은데 ? 라는 생각이 들었다.</p><p>분명 자바에서도 함수형 언어로써의 기능을 도입하고, 코틀린도 함수형 언어로의 구현이 잘되어있다라는 말을 들었었기에, 함수형 언어는 또 다른 매력과 장점이 있구나 하는 생각이 들었고, 함수형 언어가 어떤 것인지 알아보기위해 헬스장에서 유튜브로 함수형 언어 관련 영상을 들었다. 해당 영상에서 함수형 언어와 객체지향적 언어의 차이점을 공장의 프로세스에 비유하여 설명해주는데 그 설명을 듣고 아주 잘 이해를 하였다.</p><p>영상링크는 하단의 참고자료에 있다.</p><p>영상의 내용을 간단히 정리하면  <span style="color:#ff00ff">함수형언어는 함수의 동작으로 진행되며 각각의 함수는 외부의 어떠한 상태 및 변수의 값을 변화시키지 않고 항상 같은 인자에 대해 같은 결과값을 반환한다. 즉 함수형 언어를 사용하면 그냥 필요한 함수들을 선택해서 나열하면 되는 것이다.. 이렇게 함으로써  외부의 변화로인한 오류, 특정 프로세스에서 발생한 오류가 다른 프로세스에 영향을 미치는 등의 부작용으로부터 자유로워 진다.</span></p><p>집에 돌아와 함수형 언어를 검색해보니 공통적으로 고차함수, 람다, 순수 함수와 같은 키워드가 눈에 많이 띈다. 그러면 우선 이 세개 키워드의 의미부터 파악해보자.</p><h3>람다 :</h3><p>다른 함수의 인자로 넘기는 <span style="color:#ff7f00">함수</span>, 함수의 결괏값으로 반환하는 <span style="color:#ff7f00">함수</span>, 변수에 저장하는 <span style="color:#ff7f00">함수</span>를 말한다.</p><p>다른 함수의 인자로 함수를 넘긴다고..?, 함수의 반환값으로 함수를 반환한다..? 변수에 함수를 저장한다 ..? 이게 무슨 말인지 이해가 어렵다.. 이를 알려면 고차 함수의 개념을 알아야한다.</p><h3>고차 함수 :</h3><p>고차함수는 함수를 일반 자료형이나 객체처럼 인자로 받거나, 리턴할 수 있는 함수이다.</p><p>이름만 고차함수이지 사용법은 일반 함수와 같다. 다만 함수의 인자로 함수를 받을 수 있고, 리턴도 함수를 리턴할 수 있는 것이다. 따라서 함수를 인자로 받을 때는 인자에 정의하는 부분을 람다 표현식을 이용해 표기한다.</p><pre><code class="language-kotlin">
//function1은 인자로 매개변수가 없고, 반환값 또한 없는 함수를 받는다. 따라서 고차함수이다.
fun funtion1(f: ()-&gt;Unit){
    f()
}

//function2는 인자로 String과 인자를 Int두개를 받고 String을 반환하는 함수를 받는다. 따라서 고차함수이다.
fun function2(f: (Int,Int)-&gt;String, str: String){
    println(str)
    println(f())
}
</code></pre><h3>순수 함수 :</h3><p>순수 함수는 같은 인자에 대하여 항상 같은 값을 반환한다. 그리고 순수 함수는 함수 외부의 어떤 상태도 바꾸지 않는다.</p><p>즉, 헬스장에서 들었던 함수형 언어의 개념관련 유튜브 내용과 연관지어 세개의 키워드를 조합해보면, 함수형 언어는 <span style="color:#ff00ff">연속된 함수의 동작으로 코드가 실행되며, 순수함수를 사용하여 부작용을 줄이고 그 순수함수들은 람다 표현식을 이용하여 짤 수 있다!</span></p><p>참고자료 :</p><p><a href="https://www.youtube.com/watch?v=jVG5jvOzu9Y">https://www.youtube.com/watch?v=jVG5jvOzu9Y</a></p><p><a href="https://kotlinlang.org/docs/home.html">https://kotlinlang.org/docs/home.html</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[1월 15일의 깨달음]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/knowledge1</link>
            <guid>knowledge1</guid>
            <pubDate>Sat, 15 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[코프링 (코틀린 + 스프링)에서 entity는 자바+스프링에서 사용하는 방법과 어떻게 다를까 ?]]></description>
            <content:encoded><![CDATA[<h3>코프링 (코틀린 + 스프링)에서 entity는 자바+스프링에서 사용하는 방법과 어떻게 다를까 ?</h3><p>12월 말부터 시작한 코틀린 + 스프링 온라인 스터디 모임에서 코틀린에 대한 기본적인 문법 공부를 마치고 간단한 프로젝트를 기획하고 시작하게 되었다.</p><p>스터디의 목적이 코틀린 자체의 언어를 학습하고 스프링에 적용해보는 것이 목적이었기에 프로젝트의 기획은 따로 하지 않고 next-step이라는 교육 단체에서 진행한 음식점에서 사용하는 주문 포스기 프로젝트를 차용하였다. 전체적인 틀은 차용하고 세부적으로 구현할 것에 대해서는 팀원분들과 이야기를 나누며 구체화해 나갔다. er-diagram을 짜고, 환경 세팅을 현직에서 코틀린으로 스프링을 다루고 계신 스터디장님께서 맡아 해주셨고, 주문, 상품, 배달, 메뉴(상품의 집합)으로 도메인을 나누었고 나는 주문 로직을 맡아 진행을 하게 되었다.</p><p>er-diagram이 만들어 졌으니 스프링에서 DB에 쓰일 필드와 테이블관의 연관관계 설정을 위해 entity를 만드는 작업을 시작하였다.</p><p>프로젝트를 진행하기 전에 공부한 코틀린 문법을 바탕으로 java+spring에서 entity를 만들어주듯이 코드를 써내려갔다.</p><p>사용언어가 코틀린이든 자바든, 스프링에서 지원하는 기능은 언어와 무관하게 동일한 문법일 것이기 때문에, 평소에 짜듯이 클래스에 이 클래스가 entity임을 알려주고 빈등록을 위한 @Entity을 붙여주고, id 컬럼을 만들어주고, 필드들을 생성해줬다.</p><p>코틀린은 해당 변수가 불변이면 val, 가변이면 var을 명시해주므로, 첫 번째 고민에 빠졌다.. entity의 각 필드는 불변으로 선언하는 것이 맞을까? 아니면 가변으로 선언하는 것이 맞을까? .. 조금의 고민 끝에 var로 우선 선언을 해주었다.</p><p>가변으로 선언해준 이유는, 특정 필드를 업데이트하는 로직과 같은 경우에, entity에 디비의 데이터를 불러와 특정 필드를 <span style="color:#ff7f00">수정</span>해주어야하는데 이러한 상황에서 해당 필드가 불변이면 수정이 안될 것이기 때문이다..!</p><p>코프링을 시작하고 마딱드린 첫 번째 고민은 이렇게 해결을 하였고,, 코틀린에서는 변수의 타입을 후위에 ‘:’ 키워드 다음에 붙여 주므로 공부했던대로 필드를 정성스레 만들어준다.</p><p>id에 해당하는 필드에 @Id어노테이션과 생성 전략도 IDENTITY로 설정을 해준다.</p><p>아 맞다, 코틀린에서는 공포의 nullPointerException에 대해 완전한 안전성을 주기 위해, 변수가 null이 가능한지 아닌지를 ‘?’기호 하나로 명시해줄 수 있다. ?가 타입뒤에 붙게되면 nullable한 변수가 되고 ?가 없으면 non-null인 변수가 되는 것이다..!</p><p>두 번째 고민이 든다.. 엔터티의 필드들은 nullable해야할까? 아니면 non-null이어야할까 ?</p><p>자바로 엔터티를 만들 때를 다시 떠올려보자.. 해당 필드가 빈값으로 디비에 저장되면 안될경우에, @NotNull로 null이면 안된다는 것을 명시해주었다. 어라, kotlin에서는 db에 넣기 한참 전에, 최초에 디비에 넣기위한 entity 데이터를 만드는 순간에 언어적 차원에서 <span style="color:#ff7f00">?키워드하나로, 해당 필드가 null이 가능한지 불가능한지를 컨트롤할 수 있게 되었다.</span> 그러면 해당 필드가 null이어도 되는지 안되는지를 생각해보았고 nullable여부를 설정하여 해결하였다.</p><p>마지막으로 lombok의 어노테이션들도 엔터티 클래스에 추가해 주었다.</p><p><img src="image/code1.png" alt="code1.png"/></p><p>코드를 다 짜고 보니, 자바로 엔터티를 만들어 준거랑 크게 다른게없다..! 코틀린 문법을 학습할 때 분명 여러 다양한 클래스들이 존재하고 자바와는 다른 문법들이 존재하였는데, 막상 스프링에 적용하고 보니 평소 자바로 짠 코드와 비슷하다.. 내가 아직 코틀린 문법을 잘 활용하지 못하는 건가 싶어 코틀린으로 만든 entity코드들을 조사해보았다.</p><p>다른 분들이 짠 코드들을 여러개 봐보고, 우하한 테크 세미나에서 진행한 코프링 강의를 보니 여러 개선점들이 눈에 띄었다.</p><p>우선 첫 번째로, <span style="color:#ff00ff">var 선택에 대한 조심이 필요하다는 것.</span></p><p>필드들을 var로 선언한 것은 앞에서 설명한 이유가 타당하다고 생각한다. 하지만 코틀린은 기본적으로 val을 권장하고 val을 씀으로써 코드 로직에 있어 안정감을 주게 된다. 따라서 변수값이 변하는 상황이 없다고 생각되는 경우, val을 사용하도록 하자!</p><p>두 번째로, <span style="color:#ff00ff">data class를 entity 클래스에서 사용하는 것을 지양하자.</span></p><p>코틀린에서는 data만을 다루는 목적의 클래스를 따로 제공한다. data키워드를 추가하여 class를 생성해주면 해당 클래스는 lombok의 @Data 어노테이션과 같이 getter, setter을 지원하고 toString, toEqual, hashCode()와 같은 Canonical Methods도 지원을 한다!</p><p>나는 별 생각없이 엔터티를 일반 클래스로 만들어줬는데, entity클래스또한 데이터를 다루는 목적의 클래스이므로, data class를 사용한는 것이 적합할텐데, entity에서는 사용을 지양하라고 해서 별 생각없이 올바른 코드를 짰다.</p><p>entity클래스를 data 클래스로 구현하는 것을 지양하는 이유는, 엔터티끼리 양방향 연관관계가 설정되어있을 때, toString, hashCode()와 같은 함수를 사용하면 무한 순환 참조가 발생할 수 있기 때문이라고 한다.</p><p>나중에 알게되었는데, 코틀린에서는 롬복이 지원하는 <span style="color:#ff00ff">@Getter, @Setter, @Builder, @RequiredArgsConstructor과 같은 기능을 var, val, 주생성자로 해결이 가능하다.</span></p><p>builder를 사용할 필요없이 아래와 같이 생성자로 값을 넣어줄 수 있고,</p><p><img src="image/code2.png" alt="code2.png"/>
업데이트를 해야하는 상황에서 setter를 사용할 필요없이 간단하게 아래와 같이 ‘.’키워드로 접근하여 특정 필드의 수정값을 넣어주면된다!</p><p><img src="image/code3.png" alt="code3.png"/>
아직 더 써봐야겠지만, 언어를 바꾸었을 뿐인데, 코드가 많이 단순화되고 직관적이라고 느꼈고, 외부 라이브러리로 사용했던 기능들을 언어 자체의 기능만으로도 충분하게 사용이 가능하다는 것을 알게되었다!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[1월 3일의 생각]]></title>
            <link>https://seongkyu-lim.github.io/Blog/blog/thingking</link>
            <guid>thingking</guid>
            <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.]]></description>
            <content:encoded><![CDATA[<p>좋은 분들과 진행하고 있는 디자인 패턴 스터디가 장장 3달을 이라는 시간이 흘러 마지막 주가 되었다.</p><p>마지막으로 정리를 담당하였는데, 정리를 위해 스터디한 내용을 다시 읽어보니 내가 이걸 공부했었나 싶은 놀라운 상황이..</p><p>언젠가 써먹을 때가 있겠지 싶어 그래도 개념들을 다시 한번 정리해보자.</p><p>사실 디자인 패턴이라는 개념에 어떤 식으로 접근을 해야할지 스터디 마지막 주까지도 감이 잘 오지 않는다.</p><p>그래서 현직자의 시선을 빌려보고자 여러 개발자분들의 블로그에 디자인 패턴에 대한 내용이 있는지 찾아보다가 현재 인프런 CTO를 맞고 게신 이동욱님의 블로그의 포스트로 들어가게 되었다.</p><p>자바지기(박재성)님의 세미나 내용 정리 글이었다.</p><h3>삶을 훌륭하게 가꾸어주는 것은 행복감이 아니라 깊이 빠져드는 몰입이다.</h3><p>좋은 글귀와 함께, 스터디의 막바지에 와서도 디자인 패턴에 대한 감이 잘 오지 않는 내가 정상이라는 것을 말해주는 문장이 있다.</p><ul><li>디자인 패턴을 공부해도 어디에 쓸지 모르는 경우가 많다.</li><li>리팩토링을 끊임없이 하다가 디자인패턴을 보면 더 큰 깨달음을 얻지만, 반대로하게 되면 스트레스만 늘수도 있다.</li></ul><p>맞다. 사실 지금의 나한테 디자인 패턴은 반드시 필요한 개념은 아닐 수 있다.</p><h3>그렇다면 디자인 패턴을 공부하면서 얻을 수 있었던 경험은 무엇인가 ?</h3><ul><li>자바 언어를 공부할 때, 알고리즘 문제를 풀거나 강의를 들으며 문법적인 것을 공부를 했다면 디자인 패턴을 공부하며 예시들을 보면서 순수 자바언어로 짜는 코드들에 대한 시야가 확장 됨.</li><li>코드를 설명하는 능력의 부족함, 개선하고자하는 의지를 얻음.</li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>